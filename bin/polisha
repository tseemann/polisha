#!/usr/bin/env perl
use v5.26;
use strict;
use File::Basename;
use Getopt::Std;
use Cwd qw(abs_path);
use File::Which;
use File::Temp qw(tempdir);
use Term::ANSIColor;
use List::Util qw(min max);
use File::Copy;

#......................................
my $VERSION = "0.1.0";
my $EXE = basename($0);
my $MAPCALLER = "MapCaller -maxmm 0.02 -alg ksw2 -ploidy 1 -min_cnv 10000000 -min_gap 10000000";

#......................................
my %opt = (d=>10, n=>4, j=>0, 'q'=>13, Q=>60);
@ARGV or usage(1);
getopts('hVkf:r:l:i:p:d:n:j:q:Q:', \%opt);
$opt{h} and usage(0);
$opt{V} and version();
my $R1 = check_file($opt{f}, '-f R1.fq');
my $R2 = check_file($opt{r}, '-r R2.fq');
my $IN = check_file($opt{i}, '-i IN.fa');
my $ONT = $opt{l} ? check_file($opt{l}, "-l ONT.fq") : '';
my $CPUS = check_int($opt{j} || cpus(), 1, undef, '-j');
my $ITER = check_int($opt{n}, 2, 100, '-n');
$ITER % 2 == 0 or err("-n must be an even number");
my $MINDP = check_int($opt{d}, 1, undef, '-m');
my $MINBQ = check_int($opt{'q'}, 0, 99);
my $MINMQ = check_int($opt{'Q'}, 0, 60);

#......................................
banner("This is $EXE $VERSION");
check_tools(qw'pilon minimap2 samtools');

#rotate_contigs($IN, "rot1.fa");
#rotate_contigs("rot1.fa", "rot2.fa");
#exit(5);

my $CLEAN = $opt{k} ? 0 : 1;
my $dir = tempdir(CLEANUP=>$CLEAN);
msg("Workdirr:", $dir);

my $in = $IN;
for my $round (1 .. $ITER) {
  banner("Correction round $round");
  my $bam = "$dir/$round.short.bam";
  bam($in, [ $R1, $R2 ], $bam);
  my $pilon = "$dir/$round.pilon";
  pilon($in, $bam, $pilon);
  $in = "$pilon.fasta";
  my $changes = changes("$dir/$round.pilon.changes");
  my $out = "$dir/$round.plion.rorate.fasta";
  rotate_contigs($in, $out);
  $in = $out;
  last if $changes == 0 and $round % 2 == 0;
}

banner("FInalsing up");

msg("Fixing FASTA IDs");
my @ffn = slurp($in);
for my $i (0 .. $#ffn) {
  $ffn[$i] =~ s/(_pilon|_rotate)+$//;
}
my $OUT = $opt{'p'}.'.fna';
spew($OUT, \@ffn);

msg("Collating changes");
my $CHA = $opt{'p'}.'.txt';
run("cat $dir/*.pilon.changes > '$CHA'");
msg("Kept output files in $dir") unless $CLEAN;
msg("Result:\n* $OUT\n* $CHA");

#......................................
sub rotate_contigs {
  my($fin, $fout) = @_;
  my $in = fasta2hash($fin);
  my %out;
  msg("Rotating contigs");
  for my $id (keys %$in) {
    my $seq = $in->{$id};
    my $D = int( length($seq) / 2 );
    $seq = substr($seq,$D)
         . substr($seq,0,$D);
    length($seq)==length($in->{$id})
      or err("Rotation of $id failed");
    $out{"${id}_rotate"} = $seq;
  } 
  hash2fasta($fout, \%out);
}

#......................................
sub bam {
  my($ref, $reads, $bam) = @_;
  my $opt = "-t $CPUS -a";
  $opt .= (@$reads==1 ? ' -x map-ont' : ' -x sr');
  $opt .= join('', map { " '$_'" } $ref, @$reads);
  run("minimap2 $opt" 
     ." | samtools sort -@ $CPUS -m 512M"
     ." > '$bam'");
  run("samtools index '$bam'");
  return;
}

#......................................
sub pilon {
  my($old, $bam, $new) = @_;
  run(
    "_JAVA_OPTIONS=-Xmx8g pilon"
   ." --threads $CPUS"
   ." --genome '$old' --frags '$bam'"
   ." --output '$new' --changes"
   ." --minqual $MINBQ --minmq $MINMQ --mindepth $MINDP"
   ." --fix bases --nostrays" 
  );
  return;
}

#......................................
sub changes {
  my($fname) = @_;
  my($ins,$del,$sub,$tot) = (0,0,0,0);
  # NZ_LT598657:341666 NZ_LT598657_pilon:341666 . G
  foreach (slurp($fname)) {
    my($id,undef,$ref,$alt) = split ' ';
    if ($ref eq '.') { $ins++; }
    elsif ($alt eq '.') { $del++; }
    else { $sub++; }
    $tot++;
  }
  msg("Changes: $sub subs | $ins ins | $del del");
  return $tot;
}

#......................................
sub version {
  print "$EXE $VERSION\n";
  exit(0);
}
#......................................
sub usage {
  my($ec) = 0;
  select $ec ? \*STDERR : \*STDOUT;
  print 
    "SYNOPSIS\n",
    "  Correct assembly errors with Illumina reads\n",
    "USAGE\n",
    "  $EXE [options] -f R1.fq -r R2.fq -i contigs.fa -o fixed.fa\n",
    "OPTIONS\n",
    "  -h        Print this help\n",
    "  -V        Print version and exit\n",
    "  -j CPUS   NUmber of threads [$opt{j}]\n",
    "INPUT/OUTPUT\n",
    "  -p PREFIX Output prefix\n",
    "  -i FASTA  Input contigs\n",
    "  -f FASTQ  Illumina R1 FASTQ\n",
    "  -r FASTQ  Illumina R2 FASTQ\n",
    "  -l FASTQ  Nanopore long reads\n",
    "  -k        Keep temporay files\n",
    "PARAMTERS\n",
    "  -d INT    Minimum depth [$opt{d}]\n",
    "  -n INT    Maximum correction rounds [$opt{n}]\n",
    "  -q INT    Min base quality [$opt{q}]\n",
    "  -Q INT    Min mapping qualoty [$opt{Q}]\n",
#    "  -s FLOAT  Subsample reads for speed [$opt{s}]\n",
    "END\n";
  print 
  exit($ec);
}
#......................................
sub msg {
  print STDERR "@_\n";
}
#......................................
sub err {
  msg("ERROR:", @_);
  exit(-1);
}
#......................................
sub run {
  msg("Running:", color('blue'), @_, color('reset'));
  system(@_)==0 or 
    err("$! | could not run:", @_);
}
#......................................
sub check_tools {
  for my $exe (@_) {
    my $path = which($exe);
    $path 
      ? msg("Found $exe - $path")
      : err("Could not find $exe - plase install it")
      ;    
  }
}
#......................................
sub check_file {
  my($fn, $msg) = @_;
  $msg ||= 'file';
  $fn or err("Please provide $msg");
  -r $fn or err("Can't read $msg '$fn'");
  return abs_path($fn);
}
#......................................
sub check_int {
  my($x, $min, $max, $msg) = @_;
  defined($x) or err("$msg has no value");
  $x =~ m/^-?\d+$/ or err("$msg '$x' is not an integer");
  err("$msg $x must be >= $min")
    if defined($min) && $x < $min;
  err("$msg $x must be <= $max")
    if defined($max) && $x > $max;
  return $x;  
}

#......................................
sub cpus {
  my($cpus) = qx"nproc";
  $cpus ||= 1;
  chomp $cpus;
  return $cpus;
}

#......................................
sub banner {
  my $text = " @_ ";
  #my($W) = GetTerminalSize(); # WC,HC,WP,HP
  my $W = qx'tput cols';
  chomp $W;
  my $X = '='x($W-1);
  print STDERR 
    color('green'),
    $X, "\n", $text, "\n", $X, "\n",
    color('reset');
}

#......................................
sub fasta2hash {
  my($fname) = @_;
  my %seq;
  my($id,$dna,$bp);
  open my $FASTA, '<', $fname;
  while (<$FASTA>) {
    chomp;
    if (m/^>(\S+)/) {
      $id = $1;
    }
    else {
      $seq{$id} .= $_;
      $bp += length;
    }
  }
  close $FASTA;
  for my $id (keys %seq) {
    $seq{$id} =~ s/[^AGTC]/N/gi;
  }
  my $N = scalar keys %seq;
  msg("Loaded $N contigs totalling $bp bp");
  return \%seq;
}

#......................................
sub hash2fasta {
  my($fname,$seq) = @_;
  my $N = scalar keys %$seq;
  msg("Writing $N contigs to: $fname");
  open my $FASTA, '>', $fname;
  for my $id (sort keys %$seq) {
    print $FASTA ">", $id, "\n", 
                  $seq->{$id}, "\n";
  }
  close $FASTA;
}

#......................................
sub slurp {
  my($fname) = @_;
  open my $IN, '<', $fname;
  my @lines = <$IN>;
  close $IN;
  chomp @lines;
  return @lines;
}

#......................................
sub spew {
  my($fname, $lines) = @_;
  open my $OUT, '>', $fname;
  print $OUT map { ($_,"\n") } @$lines;
  close $OUT;
  return;
}

#......................................

__DATA__
#    run("$MAPCALLER -r $dir/in.fa -f '$R1' -f2 '$R2'"
#       ." -t $CPUS -ad $MINDP"
#       ." -vcf $vcf -log $vcf.log 1> $vcf.out 2> $vcf.err");
#    run(qq,bcftools filter -Oz -i 'FILTER="PASS"' $vcf > $vcf.gz,);
    #run("bcftools convert -Oz $vcf > $vcf.gz");
#    run("bcftools index $vcf.gz");
#    run("bcftools consensus -f $dir/in.fa $vcf.gz > $dir/out.fa");
